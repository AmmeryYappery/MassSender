package org.example;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpRequest.BodyPublishers;
import java.util.Optional;

import com.google.gson.Gson;

public class SecretInfo {
    final private HttpClient httpClient = HttpClient.newHttpClient();
    final private Gson gson = new Gson();

    private String rblxChallengeId;
    private String rblxChallengeMetaData;
    private String rblxChallengeType;
    private String xcsrf;

    private String challengeId;
    private String verificationToken;

    public SecretInfo(String payload, String code) throws Exception {
        XCSRF();
        setRBLXData(payload);

        if(rblxChallengeId != null) {
            System.out.println(rblxChallengeId);
            twoStep(code);
            keepGoing();
        }
    }

    private void XCSRF() throws Exception {
        HttpRequest postRequest = HttpRequest.newBuilder()
                .uri(new URI("https://auth.roblox.com/v2/logout"))
                .setHeader("Cookie", ".ROBLOSECURITY=" + getROBLOSECURITY())
                .POST(BodyPublishers.noBody())
                .build();
        HttpResponse<String> postResponse =  httpClient.send(postRequest, HttpResponse.BodyHandlers.ofString());

        if(postResponse.headers().firstValue("x-csrf-token").isPresent()) {
            this.xcsrf = postResponse.headers().firstValue("x-csrf-token").get();
        }
    }

    private void setRBLXData(String payload) throws Exception {
        HttpRequest postRequest = HttpRequest.newBuilder()
                .uri(new URI("https://trades.roblox.com/v1/trades/send"))
                .headers("content-type", "application/json", "Cookie", ".ROBLOSECURITY=" + getROBLOSECURITY(), "X-Csrf-Token", xcsrf)
                .POST(BodyPublishers.ofString(payload))
                .build();
        HttpResponse<String> postResponse =  httpClient.send(postRequest, HttpResponse.BodyHandlers.ofString());
        //System.out.println(postResponse.body());

        System.out.println("\u001b[31m" + postResponse.body());

        Optional<String> rblxChallengeIdHeader = postResponse.headers().firstValue("rblx-challenge-id");
        Optional<String> rblxChallengeMetaDataHeader = postResponse.headers().firstValue("rblx-challenge-metadata");
        Optional<String> rblxChallengeTypeHeader = postResponse.headers().firstValue("rblx-challenge-type");

        rblxChallengeMetaDataHeader.ifPresent(System.out::println);
        if(rblxChallengeIdHeader.isPresent() && rblxChallengeMetaDataHeader.isPresent() && rblxChallengeTypeHeader.isPresent()) {
            rblxChallengeId = rblxChallengeIdHeader.get();
            rblxChallengeMetaData = rblxChallengeMetaDataHeader.get();
            rblxChallengeType = rblxChallengeTypeHeader.get();
            challengeId = Utils.getMetaDataChallengeId(rblxChallengeMetaData);
        }
    }

    private void twoStep(String code) throws Exception {
        HttpRequest postRequest = HttpRequest.newBuilder()
                .uri(new URI("https://twostepverification.roblox.com/v1/users/1341100454/challenges/authenticator/verify"))
                .headers("Cookie", ".ROBLOSECURITY=" + getROBLOSECURITY(), "X-Csrf-Token", xcsrf, "Content-Type", "application/json")
                .POST(BodyPublishers.ofString((gson.toJson(new Bodies.TwoStepBody(7, challengeId, code)))))
                .build();
        HttpResponse<String> postResponse =  httpClient.send(postRequest, HttpResponse.BodyHandlers.ofString());

        System.out.println(postResponse.body());
        verificationToken = postResponse.body().substring(postResponse.body().indexOf(':')+2, postResponse.body().indexOf('}')-1);
    }

    private void keepGoing() throws Exception {
        Bodies.VerificationMetadata verify = new Bodies.VerificationMetadata(verificationToken, false, challengeId, "Generic");

        HttpRequest postRequest = HttpRequest.newBuilder()
                .uri(new URI("https://apis.roblox.com/challenge/v1/continue"))
                .headers("Cookie", ".ROBLOSECURITY=" + getROBLOSECURITY(), "X-Csrf-Token", xcsrf, "Content-Type", "application/json")
                .POST(BodyPublishers.ofString(gson.toJson(new Bodies.ContinueBody(rblxChallengeId, Utils.rawMetaData(verify), rblxChallengeType))))
                .build();
        HttpResponse<String> postResponse =  httpClient.send(postRequest, HttpResponse.BodyHandlers.ofString());
    }

    public static String getROBLOSECURITY() {
        return ""; // Your roblosecurity cookie goes here.
    }

    public String getXCSRF() {return xcsrf;}

    public String getChallengeID() {
        return rblxChallengeId;
    }

    public String getChallengeMetaData() {return rblxChallengeMetaData;}

    public String getChallengeType() {
        return rblxChallengeType;
    }

    public static String getOTP() {return "";} // One Time Password token goes here.
}